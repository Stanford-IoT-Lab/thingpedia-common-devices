{
    "module_type": "org.thingpedia.v2",
    "params": {},
    "category": "online",
    "subcategory": "social-network",
    "types": [],
    "child_types": [],
    "auth": {
        "type": "oauth2"
    },
    "queries": {
        "search": {
            "args": [
                {
                    "name": "count",
                    "type": "Number",
                    "question": "How many tweets do you want?",
                    "is_input": true,
                    "required": false
                },
                {
                    "name": "text",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "hashtags",
                    "type": "Array(Entity(tt:hashtag))",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "urls",
                    "type": "Array(Entity(tt:url))",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "author",
                    "type": "Entity(tt:username)",
                    "question": "From which user do you want tweets?",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "in_reply_to",
                    "type": "Entity(tt:username)",
                    "question": "In reply to which user do you want tweets?",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "tweet_id",
                    "type": "Entity(com.twitter:id)",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "search recent tweets; default is 5",
            "confirmation": "recent tweets",
            "confirmation_remote": "",
            "canonical": "search on twitter",
            "formatted": [
                {
                    "type": "text",
                    "text": "@${author} tweeted: ${text}"
                }
            ],
            "poll_interval": 600000,
            "is_list": true
        },
        "home_timeline": {
            "args": [
                {
                    "name": "text",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "hashtags",
                    "type": "Array(Entity(tt:hashtag))",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "urls",
                    "type": "Array(Entity(tt:url))",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "author",
                    "type": "Entity(tt:username)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "in_reply_to",
                    "type": "Entity(tt:username)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "tweet_id",
                    "type": "Entity(com.twitter:id)",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "shows your Twitter timeline (the home page of Twitter)",
            "confirmation": "tweets from anyone you follow",
            "confirmation_remote": "tweets from anyone $__person's follow",
            "canonical": "twitter home timeline",
            "formatted": [
                {
                    "type": "text",
                    "text": "@${author} tweeted: ${text}"
                }
            ],
            "poll_interval": 600000,
            "is_list": true
        },
        "my_tweets": {
            "args": [
                {
                    "name": "text",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "hashtags",
                    "type": "Array(Entity(tt:hashtag))",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "urls",
                    "type": "Array(Entity(tt:url))",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "in_reply_to",
                    "type": "Entity(tt:username)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "tweet_id",
                    "type": "Entity(com.twitter:id)",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "get your recent tweets",
            "confirmation": "tweets from you",
            "confirmation_remote": "tweets from $__person",
            "canonical": "my tweets on twitter",
            "formatted": [
                {
                    "type": "text",
                    "text": "You tweeted: ${text}"
                }
            ],
            "poll_interval": 600000,
            "is_list": true
        },
        "direct_messages": {
            "args": [
                {
                    "name": "sender",
                    "type": "Entity(tt:username)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "message",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "get recent direct messages you received",
            "confirmation": "direct messages you received on Twitter",
            "confirmation_remote": "direct messages $__person received on Twitter",
            "canonical": "twitter direct messages",
            "formatted": [
                {
                    "type": "text",
                    "text": "@${sender}: ${message}"
                }
            ],
            "poll_interval": 600000,
            "is_list": true
        }
    },
    "actions": {
        "send_direct_message": {
            "args": [
                {
                    "name": "to",
                    "type": "Entity(tt:username)",
                    "question": "Who do you want to send the message to?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "message",
                    "type": "String",
                    "question": "What message do you want to send?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "send a direct message",
            "confirmation": "send a direct message on Twitter to $to saying $message",
            "confirmation_remote": "send a direct message on $__person's Twitter to $to saying $message",
            "canonical": "send dm on twitter",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false,
            "label": null
        },
        "post_picture": {
            "args": [
                {
                    "name": "caption",
                    "type": "String",
                    "question": "What caption do you want?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "picture_url",
                    "type": "Entity(tt:picture)",
                    "question": "Upload the picture now.",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "post a tweet with a picture",
            "confirmation": "tweet $caption with an attached picture",
            "confirmation_remote": "post $caption and a picture on $__person's Twitter",
            "canonical": "post picture on twitter",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "follow": {
            "args": [
                {
                    "name": "user_name",
                    "type": "Entity(tt:username)",
                    "question": "What user do you want to follow?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "follow the named user",
            "confirmation": "follow $user_name on Twitter",
            "confirmation_remote": "follow $user_name with $__person's Twitter",
            "canonical": "follow on twitter",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "unfollow": {
            "args": [
                {
                    "name": "user_name",
                    "type": "Entity(tt:username)",
                    "question": "What user do you want to unfollow?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "stop following the named user; this call succeeds even if the user was already followed before",
            "confirmation": "unfollow $user_name on Twitter",
            "confirmation_remote": "unfollow $user_name from $__person's Twitter",
            "canonical": "unfollow on twitter",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "post": {
            "args": [
                {
                    "name": "status",
                    "type": "String",
                    "question": "What do you want to tweet?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "post a tweet; use # to include a hashtag and @ to reply",
            "confirmation": "tweet $status",
            "confirmation_remote": "post $status on $__person's Twitter",
            "canonical": "post on twitter",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false,
            "label": null
        },
        "retweet": {
            "args": [
                {
                    "name": "tweet_id",
                    "type": "Entity(com.twitter:id)",
                    "question": "What tweet do you want to retweet?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "retweet a given tweet, by id",
            "confirmation": "retween $tweet_id",
            "confirmation_remote": "retweet $tweet_id on $__person's Twitter Account",
            "canonical": "retweet",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        }
    },
    "examples": [
        {
            "utterance": "when someone i follow tweets",
            "program": "let stream x := monitor (@com.twitter.home_timeline());"
        },
        {
            "utterance": "when user ${p_author} tweets",
            "program": "let stream x := \\(p_author :Entity(tt:username)) -> monitor ((@com.twitter.home_timeline()), author == p_author);"
        },
        {
            "utterance": "when someone i follow replies to user ${p_in_reply_to} on twitter",
            "program": "let stream x := \\(p_in_reply_to :Entity(tt:username)) -> monitor ((@com.twitter.home_timeline()), in_reply_to == p_in_reply_to);"
        },
        {
            "utterance": "when i receive a direct message on twitter",
            "program": "let stream x := monitor (@com.twitter.direct_messages());"
        },
        {
            "utterance": "when i receive a direct message from ${p_sender} on twitter",
            "program": "let stream x := \\(p_sender :Entity(tt:username)) -> monitor ((@com.twitter.direct_messages()), sender == p_sender);"
        },
        {
            "utterance": "if i receive a dm on twitter from ${p_sender}",
            "program": "let stream x := \\(p_sender :Entity(tt:username)) -> monitor ((@com.twitter.direct_messages()), sender == p_sender);"
        },
        {
            "utterance": "when i tweet",
            "program": "let stream x := monitor (@com.twitter.my_tweets());"
        },
        {
            "utterance": "when i reply to ${p_in_reply_to} on twitter",
            "program": "let stream x := \\(p_in_reply_to :Entity(tt:username)) -> monitor ((@com.twitter.my_tweets()), in_reply_to == p_in_reply_to);"
        },
        {
            "utterance": "tweets matching ${p_text} on twitter",
            "program": "let table x := \\(p_text :String) -> (@com.twitter.search()), text =~ p_text;"
        },
        {
            "utterance": "${p_text:const} tweets",
            "program": "let table x := \\(p_text :String) -> (@com.twitter.search()), text =~ p_text;"
        },
        {
            "utterance": "recent tweets from ${p_author}",
            "program": "let table x := \\(p_author :Entity(tt:username)) -> (@com.twitter.search()), author == p_author;"
        },
        {
            "utterance": "recent tweets from ${p_author} matching ${p_text}",
            "program": "let table x := \\(p_author :Entity(tt:username), p_text :String) -> (@com.twitter.search()), (text =~ p_text && author == p_author);"
        },
        {
            "utterance": "recent tweets in reply to ${p_in_reply_to}",
            "program": "let table x := \\(p_in_reply_to :Entity(tt:username)) -> (@com.twitter.search()), in_reply_to == p_in_reply_to;"
        },
        {
            "utterance": "recent tweets in reply to ${p_in_reply_to} matching ${p_text}",
            "program": "let table x := \\(p_in_reply_to :Entity(tt:username), p_text :String) -> (@com.twitter.search()), (text =~ p_text && in_reply_to == p_in_reply_to);"
        },
        {
            "utterance": "tweets with hashtag ${p_hashtag} on twitter",
            "program": "let table x := \\(p_hashtag :Entity(tt:hashtag)) -> (@com.twitter.search()), contains(hashtags, p_hashtag);"
        },
        {
            "utterance": "tweets with hashtag ${p_hashtag}",
            "program": "let table x := \\(p_hashtag :Entity(tt:hashtag)) -> (@com.twitter.search()), contains(hashtags, p_hashtag);"
        },
        {
            "utterance": "${p_count:const} recent tweets with hashtag $p_hashtag",
            "program": "let table x := \\(p_count :Number, p_hashtag :Entity(tt:hashtag)) -> (@com.twitter.search(count=p_count)), contains(hashtags, p_hashtag);"
        },
        {
            "utterance": "tweets from ${p_author} with hashtag $p_hashtag",
            "program": "let table x := \\(p_author :Entity(tt:username), p_hashtag :Entity(tt:hashtag)) -> (@com.twitter.search()), (contains(hashtags, p_hashtag) && author == p_author);"
        },
        {
            "utterance": "tweets with hashtag ${p_hashtag} in reply to ${p_in_reply_to}",
            "program": "let table x := \\(p_hashtag :Entity(tt:hashtag), p_in_reply_to :Entity(tt:username)) -> (@com.twitter.search()), (contains(hashtags, p_hashtag) && in_reply_to == p_in_reply_to);"
        },
        {
            "utterance": "tweet ${p_status}",
            "program": "let action x := \\(p_status :String) -> @com.twitter.post(status=p_status);"
        },
        {
            "utterance": "post on twitter saying ${p_status}",
            "program": "let action x := \\(p_status :String) -> @com.twitter.post(status=p_status);"
        },
        {
            "utterance": "send a dm on twitter to ${p_to} saying ${p_message}",
            "program": "let action x := \\(p_to :Entity(tt:username), p_message :String) -> @com.twitter.send_direct_message(to=p_to, message=p_message);"
        },
        {
            "utterance": "send a direct message on twitter to ${p_to} saying ${p_message}",
            "program": "let action x := \\(p_to :Entity(tt:username), p_message :String) -> @com.twitter.send_direct_message(to=p_to, message=p_message);"
        },
        {
            "utterance": "dm ${p_to} on twitter saying ${p_message}",
            "program": "let action x := \\(p_to :Entity(tt:username), p_message :String) -> @com.twitter.send_direct_message(to=p_to, message=p_message);"
        },
        {
            "utterance": "tweet a picture with caption ${p_caption}",
            "program": "let action x := \\(p_caption :String) -> @com.twitter.post_picture(caption=p_caption);"
        },
        {
            "utterance": "post a picture on twitter saying ${p_caption}",
            "program": "let action x := \\(p_caption :String) -> @com.twitter.post_picture(caption=p_caption);"
        },
        {
            "utterance": "follow ${p_user_name} on twitter",
            "program": "let action x := \\(p_user_name :Entity(tt:username)) -> @com.twitter.follow(user_name=p_user_name);"
        },
        {
            "utterance": "unfollow ${p_user_name} on twitter",
            "program": "let action x := \\(p_user_name :Entity(tt:username)) -> @com.twitter.unfollow(user_name=p_user_name);"
        },
        {
            "utterance": "stop following ${p_user_name} on twitter",
            "program": "let action x := \\(p_user_name :Entity(tt:username)) -> @com.twitter.unfollow(user_name=p_user_name);"
        },
        {
            "utterance": "tweets from anyone i follow",
            "program": "let table x := @com.twitter.home_timeline();"
        },
        {
            "utterance": "tweets from anyone i follow that contain ${p_text}",
            "program": "let table x := \\(p_text :String) -> (@com.twitter.home_timeline()), text =~ p_text;"
        },
        {
            "utterance": "my twitter replies to ${p_in_reply_to}",
            "program": "let table x := \\(p_in_reply_to :Entity(tt:username)) -> (@com.twitter.my_tweets()), in_reply_to == p_in_reply_to;"
        },
        {
            "utterance": "my tweets",
            "program": "let table x := @com.twitter.my_tweets();"
        },
        {
            "utterance": "my twitter direct messages",
            "program": "let table x := @com.twitter.direct_messages();"
        },
        {
            "utterance": "the direct messages i received on twitter",
            "program": "let table x := @com.twitter.direct_messages();"
        },
        {
            "utterance": "tweets from anyone i follow in reply to ${p_in_reply_to}",
            "program": "let table x := \\(p_in_reply_to :Entity(tt:username)) -> (@com.twitter.home_timeline()), in_reply_to == p_in_reply_to;"
        },
        {
            "utterance": "my tweets with hashtag ${p_hashtag}",
            "program": "let table x := \\(p_hashtag :Entity(tt:hashtag)) -> (@com.twitter.my_tweets()), contains(hashtags, p_hashtag);"
        },
        {
            "utterance": "tweets from people i follow about ${p_hashtag:const}",
            "program": "let table x := \\(p_hashtag :Entity(tt:hashtag)) -> (@com.twitter.home_timeline()), contains(hashtags, p_hashtag);"
        },
        {
            "utterance": "tweets in my timeline",
            "program": "let table x := @com.twitter.home_timeline();"
        },
        {
            "utterance": "retweet ${p_tweet_id}",
            "program": "let action x := \\(p_tweet_id :Entity(com.twitter:id)) -> @com.twitter.retweet(tweet_id=p_tweet_id);"
        },
        {
            "utterance": "automatically retweet anyone i follow",
            "program": "monitor (@com.twitter.home_timeline()) => @com.twitter.retweet(tweet_id=tweet_id);"
        },
        {
            "utterance": "become a follower of ${p_user_name} on twitter",
            "program": "let action x := \\(p_user_name :Entity(tt:username)) -> @com.twitter.follow(user_name=p_user_name);"
        },
        {
            "utterance": "be a twitter follower of ${p_user_name}",
            "program": "let action x := \\(p_user_name :Entity(tt:username)) -> @com.twitter.follow(user_name=p_user_name);"
        },
        {
            "utterance": "become a twitter follower of ${p_user_name}",
            "program": "let action x := \\(p_user_name :Entity(tt:username)) -> @com.twitter.follow(user_name=p_user_name);"
        },
        {
            "utterance": "when ${p_sender} dms me",
            "program": "let stream x := \\(p_sender :Entity(tt:username)) -> monitor ((@com.twitter.direct_messages()), sender == p_sender);"
        },
        {
            "utterance": "when ${p_sender} sends me a direct message on twitter",
            "program": "let stream x := \\(p_sender :Entity(tt:username)) -> monitor ((@com.twitter.direct_messages()), sender == p_sender);"
        },
        {
            "utterance": "when somebody dms me",
            "program": "let stream x := monitor (@com.twitter.direct_messages());"
        },
        {
            "utterance": "when somebody sends me a direct message",
            "program": "let stream x := monitor (@com.twitter.direct_messages());"
        },
        {
            "utterance": "post ${p_status} on twitter",
            "program": "let action x := \\(p_status :String) -> @com.twitter.post(status=p_status);"
        },
        {
            "utterance": "post ${p_picture_url} on twitter",
            "program": "let action x := \\(p_picture_url :Entity(tt:picture)) -> @com.twitter.post_picture(picture_url=p_picture_url);"
        },
        {
            "utterance": "post ${p_picture_url} on twitter with caption ${p_caption}",
            "program": "let action x := \\(p_picture_url :Entity(tt:picture), p_caption :String) -> @com.twitter.post_picture(picture_url=p_picture_url, caption=p_caption);"
        },
        {
            "utterance": "tweet something",
            "program": "let action x := @com.twitter.post();"
        },
        {
            "utterance": "make a tweet",
            "program": "let action x := @com.twitter.post();"
        },
        {
            "utterance": "caption ${p_picture_url} as ${p_caption:const} and post it on twitter",
            "program": "let action x := \\(p_picture_url :Entity(tt:picture), p_caption :String) -> @com.twitter.post_picture(picture_url=p_picture_url, caption=p_caption);"
        },
        {
            "utterance": "send a message to $p_to on twitter",
            "program": "let action x := \\(p_to :Entity(tt:username)) -> @com.twitter.send_direct_message(to=p_to);"
        },
        {
            "utterance": "send a twitter message to $p_to",
            "program": "let action x := \\(p_to :Entity(tt:username)) -> @com.twitter.send_direct_message(to=p_to);"
        },
        {
            "utterance": "when i receive a tweet",
            "program": "let stream x := monitor (@com.twitter.home_timeline());"
        },
        {
            "utterance": "when i receive a tweet from $p_author",
            "program": "let stream x := \\(p_author :Entity(tt:username)) -> monitor ((@com.twitter.home_timeline()), author == p_author);"
        },
        {
            "utterance": "retweet $p_tweet_id to my followers",
            "program": "let action x := \\(p_tweet_id :Entity(com.twitter:id)) -> @com.twitter.retweet(tweet_id=p_tweet_id);"
        }
    ]
}
