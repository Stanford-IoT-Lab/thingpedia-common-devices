// Copyright 2016-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above
//    copyright notice, this list of conditions and the following
//    disclaimer in the documentation and/or other materials
//    provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.

class @com.yandex.translate
#_[thingpedia_name="Yandex Translation"]
#_[thingpedia_description="Use Yandex to translate to foreign languages"]
#_[canonical="yandex translate"]
#[license="BSD-3-Clause"]
#[license_gplcompatible=true]
#[subcategory="service"]
{
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.none();

  query translate(in opt source_language: Entity(tt:iso_lang_code)
                  #_[canonical={
                    base=["source language"],
                    property=[],
                    preposition=["from #"]
                  }],
                  in req target_language: Entity(tt:iso_lang_code)
                  #_[canonical={
                    base=["target language"],
                    property=[],
                    preposition=["to #", "in #"]
                  }],
                  in req text: String
                  #_[canonical={
                    base=["text"],
                    property=[],
                    preposition=["of #"]
                  }],
                  out translated_text: String
                  #_[canonical={
                    base=["text"],
                    property=[],
                  }])
  #_[canonical=["translation"]]
  #_[confirmation="the translation of $text to $target_language"]
  #_[result=["${translated_text}"]]
  #[minimal_projection=["translated_text"]]
  #[doc="Translate text from source to destination language"];

  query detect_language(in req text: String #_[prompt="what text do you want to analyze"]
                        #_[canonical={
                           base=["text"],
                           property=[],
                           preposition=["of #"]
                        }],
                        out value: Entity(tt:iso_lang_code)
                        #_[canonical={
                           base=["detected language"],
                           property=[],
                        }])
  #_[canonical=["detected language"]]
  #_[confirmation="the language of $text"]
  #_[result=["i detected it as ${value}"]]
  #[doc="returns the ISO code of the guessed language of the given text"];
}
