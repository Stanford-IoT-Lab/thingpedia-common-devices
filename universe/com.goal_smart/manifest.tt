// Copyright 2021 Arth Bohra <arthbohra@gmail.com>
//           2018-2021 Dougherty Valley High School
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above
//    copyright notice, this list of conditions and the following
//    disclaimer in the documentation and/or other materials
//    provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.


class @com.goal_smart 
  #_[thingpedia_name="GoalSmart"]
  #_[thingpedia_description="Keep up with the latest in soccer."]
  #_[description="Keep up with the latest in soccer."]
  #[license="MIT"]
  #[license_gplcompatible=true]
  #[subcategory="media"]

{
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.none(api_key='b9b9b1e851msh45c99175d8f8df8p103e18jsn903a05143134');

  entity soccer_team #_[description="Soccer Teams in the World"];
  entity soccer_league #_[description="Soccer Leagues in the World"];
  entity soccer_player #_[description="Soccer Players in the World"];
  
  monitorable list query standings(in req league_id: Entity(com.goal_smart:soccer_league) #_[prompt="what league standings do you want out check out"],
                        out team : Entity(com.goal_smart:soccer_team),
                        out rank: Number,
                        out form: Array(String),
                        out points: Number)
  #_[canonical="league standings, league rankings, soccer rankings, league table, soccer table"]
  #_[confirmation="league standings of $league"]
  #_[result = ["${rank} . ${team} Form: ${form} Points: ${points}"]]
  #[poll_interval=3600000ms]
  #[doc="Get the standings of a league"];









  monitorable query firstPlace(in req league_id: Entity(com.goal_smart:soccer_league) #_[prompt="what league do you want to see this info for"],
                        out team : Entity(com.goal_smart:soccer_team),
                        out points: Number)
  #_[canonical="league winners, league leaders, league firsts"]
  #_[confirmation="first place of $league"]
  #_[result = ["${team} is in first place with ${points} points"]]
  #[poll_interval=3600000ms]
  #[doc="Get the first place team of a league"];

  monitorable query lastPlace(in req league_id: Entity(com.goal_smart:soccer_league) #_[prompt="what league do you want to see this info for"],
                        out team : Entity(com.goal_smart:soccer_team),
                        out points: Number)
  #_[canonical="league losers, league last, league bottom"]
  #_[confirmation="last place of $league"]
  #_[result = ["${team} is in last place with ${points} points"]]
  #[poll_interval=3600000ms]
  #[doc="Get the last place team of a league"];

  monitorable query teamRank(in req team_id: Entity(com.goal_smart:soccer_team) #_[prompt="what team do you want out check out"],
                        out team : Entity(com.goal_smart:soccer_team),
                        out rank: Number,
                        out league: Entity(com.goal_smart:soccer_league),
                        out points: Number)
  #_[canonical="team standings, team rank, team rankings, team performance"]
  #_[confirmation="league standings of $team"]
  #_[result = ["${team} is currently number ${rank} in the ${league} with ${points} points"]]
  #[poll_interval=3600000ms]
  #[doc="Get the league standings for a team"];

  monitorable list query relegationTeams(in req league_id: Entity(com.goal_smart:soccer_league) #_[prompt="what league standings do you want out check out"],
                        out team : Entity(com.goal_smart:soccer_team),
                        out rank: Number,
                        out points: Number)
  #_[canonical="league relegation, league bottoms, relegation teams, relegation sides"]
  #_[confirmation="relegation teams of $league"]
  #_[result = ["${rank} . ${team} . Points: ${points}"]]
  #[poll_interval=3600000ms]
  #[doc="Get the relegation teams of a league"];


















  monitorable list query teamFixtures(in req team_id: Entity(com.goal_smart:soccer_team) #_[prompt="what team do you want out check out"],
                        out league : Entity(com.goal_smart:soccer_league),
                        out team1: Entity(com.goal_smart:soccer_team),
                        out team2: Entity(com.goal_smart:soccer_team),
                        out venue: String)
  #_[canonical="team fixtures, team matches, team games"]
  #_[confirmation="fixtures of $team_id"]
  #_[result=["${team1} vs ${team2} at ${venue} for the ${league}"]]
  #[poll_interval=3600000ms]
  #[doc="Get the fixtures of the team"];

  monitorable list query previousFixtures(in req team_id: Entity(com.goal_smart:soccer_team) #_[prompt="what team do you want out check out"],
                        out league : Entity(com.goal_smart:soccer_league),
                        out team1: Entity(com.goal_smart:soccer_team),
                        out team2: Entity(com.goal_smart:soccer_team),
                        out score1: Number,
                        out score2: Number,
                        out result: String,
                        out venue: String)
  #_[canonical="past team fixtures, previous team matches, past team games"]
  #_[confirmation="past fixtures of $team_id"]
  #_[result=["${team1} ${result} ${team2} at ${venue} for the ${league}. The score was ${score1}-${score2}"]]
  #[poll_interval=3600000ms]
  #[doc="Get the previous fixtures of the team"];

  monitorable list query topscorers(in req league_id: Entity(com.goal_smart:soccer_league) #_[prompt="what league do you want out check out"],               
                        out player: String,
                        out goals: Number)
  #_[canonical="top goal scorers, goal scorers list, league goal scorers"]
  #_[confirmation="top scorers of $league_id"]
  #_[result=["${player} has scored ${goals} goals this season"]]
  #[poll_interval=3600000ms]
  #[doc="Get the top scorers of the league"];

  monitorable query teamUpdate(in req team_id: Entity(com.goal_smart:soccer_team) #_[prompt="what team do you want out check out "],
                        out team : Entity(com.goal_smart:soccer_team),
                        out last_opponent: Entity(com.goal_smart:soccer_team),
                        out score_of_last_match: String,
                        out league: Entity(com.goal_smart:soccer_league),
                        out league_ranking: Number)
  #_[canonical="team updates, team information, team info"]
  #_[confirmation="overall summary of $team_id"]
  #_[result=["${team} is currently number ${league_ranking} in the ${league}. Their last match was against ${last_opponent} and the score was ${score_of_last_match}"]]
  #[poll_interval=3600000ms]
  #[doc="Get the overall summary on the performance of the team"];

  

  
}
